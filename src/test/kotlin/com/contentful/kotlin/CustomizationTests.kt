/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.contentful.kotlin

import com.contentful.kotlin.annotations.ContentfulField
import com.contentful.kotlin.annotations.ContentfulSystemField
import com.contentful.kotlin.annotations.ContentfulType
import com.contentful.kotlin.models.Array
import com.contentful.kotlin.models.Asset
import com.contentful.kotlin.models.ContentType
import com.contentful.kotlin.models.Resource
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertNotNull
import com.contentful.kotlin.models.Result as ContentfulResult


class CustomizationTests {
    @Test
    fun canFetchCustomType() {
        val contentful = Contentful(SPACE_ID, DELIVERY_TOKEN)

        class Cat(val name: String?) : Resource()

        val response: ContentfulResult<Array<Cat>> = contentful.fetchAll()
        val cats = response.getOrThrow().items


        assertEquals(3, cats.size)
        assertEquals("Garfield", cats.first().name)
    }

    @Test
    fun canFetchCustomTypeWithDifferentLocale() {
        val contentful = Contentful(
            spaceId = SPACE_ID,
            token = DELIVERY_TOKEN,
            environmentId = MASTER_ENVIRONMENT_ID
        )

        data class Cat(val name: String) : Resource()

        val cats = contentful.fetchAll<Cat> {
            id("nyancat")
            locale("tlh")
        }.getOrThrow().items

        assertEquals(1, cats.size)
        assertEquals("Nyan vIghro'", cats.first().name)
    }

    @Test
    fun canFetchCustomTypeFromOutSideClass() {
        val contentful = Contentful(
            spaceId = SPACE_ID,
            token = DELIVERY_TOKEN,
            environmentId = MASTER_ENVIRONMENT_ID
        )

        // Dog is moved outside for testing reasons.

        val dogs = contentful.fetchAll<Dog>().getOrThrow().items

        assertEquals(2, dogs.size)
        assertEquals("Doge", dogs.first().name)
    }

    @Test
    fun canFetchCustomTypeWithOverwrittenTypeId() {
        val contentful = Contentful(
            spaceId = SPACE_ID,
            token = DELIVERY_TOKEN,
            environmentId = MASTER_ENVIRONMENT_ID
        )

        @ContentfulType("cat")
        data class ACatThatIsDifferent(val name: String) : Resource()

        val cats = contentful.fetchAll<ACatThatIsDifferent>().getOrThrow().items

        assertEquals(3, cats.size)
        assertEquals("Garfield", cats.first().name)
    }

    @Test
    fun canFetchAssetWithCustom() {
        val contentful = Contentful(
            spaceId = SPACE_ID,
            token = DELIVERY_TOKEN,
            environmentId = MASTER_ENVIRONMENT_ID
        )

        data class Dog(val name: String, val image: Asset?) : Resource()

        val dogs = contentful.fetchAll<Dog>().getOrThrow().items

        assertEquals(2, dogs.size)
        assertEquals("Doge", dogs.first().name)
        assertNotNull(dogs.first().image)
        assertEquals(
            "//images.ctfassets.net/cfexampleapi/1x0xpXu4pSGS4OukSyWGUK/cc1239c6385428ef26f4180190532818/doge.jpg",
            dogs.first().image!!.fields.file?.url ?: "https://http.cat/500"
        )
    }

    @Test
    fun canFetchSameCustomType() {
        val contentful = Contentful(
            spaceId = SPACE_ID,
            token = DELIVERY_TOKEN,
            environmentId = MASTER_ENVIRONMENT_ID
        )

        data class Cat(val name: String, val bestFriend: Cat? = null) : Resource()

        val cats = contentful.fetchOne<Cat>("happycat").getOrThrow().items

        assertEquals("Happy Cat", cats.first().name)
        assertNotNull(cats.first().bestFriend)
        assertEquals("Nyan Cat", cats.first().bestFriend!!.name)
    }

    @Test
    fun canFetchCustomCompoundLists() {
        val contentful = Contentful(
            spaceId = BLOG_SPACE_ID,
            token = BLOG_DELIVERY_TOKEN,
            environmentId = MASTER_ENVIRONMENT_ID
        )

        @ContentfulType("1kUEViTN4EmGiEaaeC6ouY")
        data class Author(val name: String) : Resource()

        @ContentfulType("2wKn6yEnZewu2SCCkus4as")
        data class Blog(val title: String, val author: List<Author>?) : Resource()

        val entries = contentful.fetchAll<Blog>().getOrThrow().items

        assertEquals(2, entries.size)
        assertEquals("Down the Rabbit Hole", entries.last().title)
        assertEquals("Lewis Carroll", entries.last().author!!.first().name)
    }

    @Test
    fun canFetchCustomCompoundsDeeply() {
        val contentful = Contentful(
            spaceId = TEA_SPACE_ID,
            token = TEA_DELIVERY_TOKEN,
            environmentId = MASTER_ENVIRONMENT_ID
        )

        open class LessonCopy(val title: String, val copy: String) : Resource()
        open class LessonCodeSnippets(val title: String, val java: String) : Resource()
        open class LessonImage(val title: String, val image: Asset?) : Resource()

        @ContentfulType(connectedModelsClasses = [LessonImage::class, LessonCodeSnippets::class, LessonCopy::class, Lesson::class])
        data class Lesson(
            val title: String,
            val slug: String,
            val modules: List<Any>?
        ) : Resource()

        data class Course(
            val title: String,
            val slug: String,
            val lessons: List<Lesson>?
        ) : Resource()

        val types = contentful.fetchAll<ContentType> ().getOrNull()

        val courses = contentful.fetchAll<Course> { include(2) }.getOrThrow().items

        assertEquals(2, courses.size)

        val sdkCourse = courses.last()
        assertEquals("Hello SDKs", sdkCourse.title)
        assertEquals("hello-sdks", sdkCourse.slug)

        val sdkLessons = sdkCourse.lessons!!
        assertEquals(5, sdkLessons.size)
        assertEquals("SDK basics", sdkLessons.first().title)
        assertEquals("sdk-basics", sdkLessons.first().slug)
        assertEquals(5, sdkLessons.first().modules!!.size)

        val sdkLessonCopy = sdkLessons.first().modules!!.first() as LessonCopy
        assertEquals("SDK basics > installation", sdkLessonCopy.title)
        assertEquals(
            "To make communication with Contentful as simple as possible, we've created open source SDKs.\n\nInstall an SDK:",
            sdkLessonCopy.copy
        )

        val sdkLessonImage = courses.first().lessons!![2].modules!![1] as LessonImage
        assertEquals("Content management > image", sdkLessonImage.title)
        assertEquals(
            "//images.ctfassets.net/qz0n5cdakyl9/4CWJDjGTzaU8CMAW2eYeie/d82f9fe7a879551f434ebd21a988ab19/webapp.png",
            sdkLessonImage.image!!.fields.file!!.url
        )

        val sdkLessonCode = sdkLessons[1].modules!![1] as LessonCodeSnippets
        assertEquals("Fetch all entries > code", sdkLessonCode.title)
        assertEquals(
            "final CDAArray all =\n    client\n        .fetch(CDAEntry.class)\n        .all();\n\nSystem.out.println(all);\n",
            sdkLessonCode.java
        )
    }

    @Test
    fun canRenameCustomFields() {
        val contentful = Contentful(
            spaceId = SPACE_ID,
            token = DELIVERY_TOKEN,
            environmentId = MASTER_ENVIRONMENT_ID
        )

        data class Cat(@ContentfulField("name") val nickname: String) : Resource()

        val cats = contentful.fetchAll<Cat>().getOrThrow().items

        assertEquals(3, cats.size)
        assertEquals("Garfield", cats.first().nickname)
    }

    @Test
    fun canFetchSystemFieldsInCustoms() {
        val contentful = Contentful(
            spaceId = SPACE_ID,
            token = DELIVERY_TOKEN,
            environmentId = MASTER_ENVIRONMENT_ID
        )

        data class Cat(val name: String, @ContentfulSystemField val id: String) : Resource()

        val cats = contentful.fetchAll<Cat>().getOrThrow().items

        assertEquals(3, cats.size)
        assertEquals("Garfield", cats.first().name)
        assertEquals("garfield", cats.first().id)
    }

    @Test
    fun canFetchAndRenameSystemFieldsInCustoms() {
        val contentful = Contentful(
            spaceId = SPACE_ID,
            token = DELIVERY_TOKEN,
            environmentId = MASTER_ENVIRONMENT_ID
        )

        data class Cat(val name: String, @ContentfulSystemField("id") val contentfulId: String) : Resource()

        val cats = contentful.fetchAll<Cat>().getOrThrow().items

        assertEquals(3, cats.size)
        assertEquals("Garfield", cats.first().name)
        assertEquals("garfield", cats.first().contentfulId)
    }
}

data class Dog(val name: String) : Resource()
